#include "inverse.h"

using namespace std;

//this function read the data (i.e. the ~ equilibrium configurations that have been generated by the dynamics) and calls the function network_setup. See more details about this function inside inverse.h

//input variables
//N        : # of Nodes
//L        : # of samples
//Ltot     : # of total samples in the dataset
//T        : # of time steps for which we iterate the optization routine
//beta     : inverse temperature
//rho_acc  : fraction of J's that we update at each step
//eta      : learning rate used to update the couplings. set it to ~ 0.5
//f        : set to 0 to study FB (Free Boundary) 2D lattices and to 1 to study PB (Periodic Boundary) 2D lattices
//           set to 2 to study ER graphs and to 3 to study RR graphs, 4 to study diamond lattices
//rho      : density of positive couplings in the original graph
//w        : integer >= 1 that specify the initial sample that we consider in the dataset
//           i.e. if w=1, we consider the first L samples, if w=2, we consider the second L samples and so on
//a_size   : factor that set the initial size of the vector that contains the "good couplings"
//a_th     : flag that set the threshold used to eliminate couplings from the vector of "good couplings"
//numberMB : number of minibatch
//CLUSTER  : set to 1 to run on cluster, 0 otherwise


void f_Inference(int N, int L, int Ltot, int T, double beta, double rho_acc, double eta, int f, double rho, int w, double a_size, double a_th, int numberMB, int CLUSTER);

